{"version":3,"sources":["../../../src/@ionic-native/plugins/keychain/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;;;;;;GAwBG;AASH;IAA8B,4BAAiB;IAA/C;;IAgEA,CAAC;IA9DC;;;;;OAKG;IAIH,sBAAG,GAAH,UAAI,GAAW,EAAE,cAAuB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEnE;;;;;;OAMG;IAIH,sBAAG,GAAH,UAAI,GAAW,EAAE,KAAgC,EAAE,UAAoB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElG;;;;;OAKG;IAIH,0BAAO,GAAP,UAAQ,GAAW,EAAE,cAAuB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvE;;;;;;OAMG;IAIH,0BAAO,GAAP,UAAQ,GAAW,EAAE,GAAQ,EAAE,UAAoB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9E;;;;OAIG;IAIH,yBAAM,GAAN,UAAO,GAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAExC,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IApDA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;uCACiE;IAYnE;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;uCACgG;IAWlG;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;2CACqE;IAYvE;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;2CAC4E;IAU9E;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;0CAC2C;IAxDlC,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,6BAA6B;YACrC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,2DAA2D;YACjE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,QAAQ,CAgEpB;IAAD,eAAC;CAhED,AAgEC,CAhE6B,iBAAiB,GAgE9C;SAhEY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Keychain\n * @description\n * Get and set data in the iOS Keychain\n *\n * Requires Cordova plugin: `cordova-plugin-ios-keychain`. For more info, please see the [Keychain plugin docs](https://github.com/ionic-team/cordova-plugin-ios-keychain).\n *\n * See also [Secure Storage](https://ionicframework.com/docs/native/secure-storage/) for more supported platforms.\n *\n * @usage\n * ```typescript\n * import { Keychain } from '@ionic-native/keychain';\n *\n * constructor(private keychain: Keychain) { }\n *\n * ...\n *\n * this.keychain.set(key, value).then(() => {\n *   this.keychain.get(key)\n *     .then(value => console.log('Got value', value))\n *     .catch(err => console.error('Error getting', err));\n * })\n * .catch(err => console.error('Error setting', err));\n * ```\n */\n@Plugin({\n  pluginName: 'Keychain',\n  plugin: 'cordova-plugin-ios-keychain',\n  pluginRef: 'window.Keychain',\n  repo: 'https://github.com/ionic-team/cordova-plugin-ios-keychain',\n  platforms: ['iOS']\n})\n\nexport class Keychain extends IonicNativePlugin {\n\n  /**\n   * Retrieves a value for a key\n   *\n   * @param {string} key the key to retrieve\n   * @param {string} [touchIDMessage] the message to show underneath the TouchID prompt (if any)\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  get(key: string, touchIDMessage?: string): Promise<any> { return; }\n\n  /**\n   * Sets a value for a key\n   *\n   * @param {string} key the key to set\n   * @param {string|number|boolean} value the value to set\n   * @param {boolean} [useTouchID] whether to store the value with security such that TouchID will be needed to grab it\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  set(key: string, value: string | number | boolean, useTouchID?: boolean): Promise<any> { return; }\n\n  /**\n   * Gets a JSON value for a key\n   *\n   * @param {string} key the key to retrieve\n   * @param {string} touchIDMessage the message to show underneath the TouchID prompt (if any)\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getJson(key: string, touchIDMessage?: string): Promise<any> { return; }\n\n  /**\n   * Sets a JSON value for a key\n   *\n   * @param {string} key the key to set\n   * @param {any} obj value the value to set\n   * @param {boolean} [useTouchId] Wether to store the value with security such that TouchID will be needed to grab it\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  setJson(key: string, obj: any, useTouchId?: boolean): Promise<any> { return; }\n\n  /**\n   * Removes a value for a key\n   *\n   * @param {string} key the key to remove\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  remove(key: string): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
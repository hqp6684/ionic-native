{"version":3,"sources":["../../../src/@ionic-native/plugins/apple-pay/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAA,UAAE,EAAU,MAAM,eAAA,CAAgB;AACzC,OAAO,EAAA,UAAE,EAAU,MAAM,iBAAA,CAAkB;AAC3C,OAAO,EACL,MAAM,EACN,OAAO,EACP,iBAAiB,EAClB,MAAM,oBAAA,CAAqB;AAyE5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoDG;AASH;IAA8B,4BAAiB;IAA/C;;IAgMA,CAAC;IA9LC;;;;;;;;;;;;;;OAcG;IAIH,kCAAe,GAAf;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;OAOG;IAKH,4DAAyC,GAAzC;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAIH,2DAAwC,GAAxC;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAkCG;IAIH,gDAA6B,GAA7B,UAA8B,IAAmC;QAC/D,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAqEG;IAIH,qCAAkB,GAAlB,UAAmB,KAAa;QAC9B,MAAM,CAAC;IACT,CAAC;IAED;;;;;;;;OAQG;IAIH,0CAAuB,GAAvB,UAAwB,QAA4B;QAClD,MAAM,CAAC;IACT,CAAC;IACI,mBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,uBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA3KA;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;mDAGD;IAcD;QAJC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,0CAA0C;SAC1D,CAAC;;;wCAC2C,UAAU;6EAEtD;IAUD;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;4EAGD;IAwCD;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;iEAGD;IA2ED;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;sDAGD;IAcD;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;2DAGD;IAzLU,QAAQ;QARpB,MAAM,CAAC;YACN,UAAU,EAAE,UAAU;YACtB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,UAAU;YACrB,IAAI,EAAE,wDAAwD;YAC9D,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,QAAQ,CAgMpB;IAAD,eAAC;CAhMD,AAgMC,CAhM6B,iBAAiB,GAgM9C;SAhMY,QAAQ","file":"index.js","sourceRoot":"","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {\n  Plugin,\n  Cordova,\n  IonicNativePlugin\n} from '@ionic-native/core';\n\nexport type IMakePayments = 'This device can make payments and has a supported card' | 'This device cannot make payments.' | 'This device can make payments but has no supported cards';\nexport type IShippingType = 'shipping' | 'delivery' | 'store' | 'service';\nexport type IBillingRequirement =  'none' | 'all' | 'postcode' | 'name' | 'email' | 'phone';\nexport type ITransactionStatus = 'success' | 'failure' | 'invalid-billing-address' | 'invalid-shipping-address' | 'invalid-shipping-contact' | 'require-pin' | 'incorrect-pin' | 'locked-pin';\nexport type ICompleteTransaction = 'Payment status applied.';\nexport type IUpdateItemsAndShippingStatus = 'Updated List Info' | 'Did you make a payment request?';\n\nexport interface IPaymentResponse {\n  billingNameFirst?: string;\n  billingNameMiddle?: string;\n  billingNameLast?: string;\n  billingEmailAddress?: string;\n  billingSupplementarySubLocality?: string;\n  billingAddressStreet?: string;\n  billingAddressCity?: string;\n  billingAddressState?: string;\n  billingPostalCode?: string;\n  billingCountry?: string;\n  billingISOCountryCode?: string;\n\n  shippingNameFirst?: string;\n  shippingNameMiddle?: string;\n  shippingNameLast?: string;\n  shippingEmailAddress?: string;\n  shippingPhoneNumber?: string;\n  shippingSupplementarySubLocality?: string;\n  shippingAddressStreet?: string;\n  shippingAddressCity?: string;\n  shippingAddressState?: string;\n  shippingPostalCode?: string;\n  shippingCountry?: string;\n  shippingISOCountryCode?: string;\n\n  paymentData: string;\n  transactionIdentifier: string;\n  paymentMethodDisplayName?: string;\n  paymentMethodNetwork?: string;\n  paymentMethodTypeCard?: string;\n}\n\nexport interface IOrderItem {\n  label: string;\n  amount: number;\n}\nexport interface  IShippingMethod {\n  identifier: string;\n  label: string;\n  detail: string;\n  amount: number;\n}\nexport interface IOrderItemsAndShippingMethods {\n  items: IOrderItem[];\n  shippingMethods?: IShippingMethod[];\n}\n\nexport interface IOrder extends IOrderItemsAndShippingMethods {\n  merchantIdentifier: string;\n  currencyCode: string;\n  countryCode: string;\n  billingAddressRequirement?: IBillingRequirement | IBillingRequirement[];\n  shippingAddressRequirement?: IBillingRequirement | IBillingRequirement[];\n  shippingType?: IShippingType;\n}\n\nexport interface ISelectedShippingContact {\n  shippingAddressCity: string;\n  shippingAddressState: string;\n  shippingPostalCode: string;\n  shippingISOCountryCode: string;\n}\n\n/**\n * @name Apple Pay\n * @description\n * A dependency free Cordova plugin to provide Apple Pay functionality.\n *\n * @usage\n * ```typescript\n * import { ApplePay } from '@ionic-native/apple-pay';\n *\n *\n * constructor(private applePay: ApplePay) { }\n *\n * ...\n * async applePay() {\n *   // This block is optional -- only if you need to update order items/shipping\n *   // methods in response to shipping method selections\n *   this.applePay.startListeningForShippingContactSelection()\n *     .subscribe(async selection => {\n *       try {\n *         await this.applePay.updateItemsAndShippingMethods({\n *           items: getFromSelection(selection),\n *           shippingMethods: getFromSelection(selection),\n *         });\n *       }\n *       catch {\n *         // handle update items error\n *       }\n *     });\n *\n *   try {\n *     const applePayTransaction = await this.applePay.makePaymentRequest({\n *       items,\n *       shippingMethods,\n *       merchantIdentifier,\n *       currencyCode,\n *       countryCode,\n *       billingAddressRequirement: ['name', 'email', 'phone'],\n *       shippingAddressRequirement: 'none',\n *       shippingType: 'shipping'\n *     });\n *\n *     const transactionStatus = await completeTransactionWithMerchant(applePayTransaction);\n *     await this.applePay.completeLastTransaction(transactionStatus);\n *   } catch {\n *     // handle payment request error\n *     // Can also handle stop complete transaction but these should normally not occur\n *   }\n *\n *   // only if you started listening before\n *   await this.applePay.stopListeningForShippingContactSelection();\n * }\n * ```\n */\n@Plugin({\n  pluginName: 'ApplePay',\n  plugin: 'cordova-plugin-applepay',\n  pluginRef: 'ApplePay',\n  repo: 'https://github.com/samkelleher/cordova-plugin-applepay',\n  platforms: ['iOS'],\n})\n\nexport class ApplePay extends IonicNativePlugin {\n\n  /**\n   * Detects if the current device supports Apple Pay and has any capable cards registered.\n   * @return {Promise<IMakePayments>} Returns a promise\n   *\n   * @usage\n   * try {\n   *   const message = await this.applePay.canMakePayments();\n   *   // Apple Pay is enabled and a supported card is setup. Expect:\n   *   // 'This device can make payments and has a supported card'\n   * } catch (message) {\n   *   // There is an issue, examine the message to see the details, will be:\n   *   // 'This device cannot make payments.''\n   *   // 'This device can make payments but has no supported cards'\n   * }\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  canMakePayments(): Promise<IMakePayments> {\n    return;\n  }\n\n  /**\n   * Starts listening for shipping contact selection changes\n   * Any time the user selects shipping contact, this callback will fire.\n   * You *must* call `updateItemsAndShippingMethods` in response or else the\n   * user will not be able to process payment.\n   * @return {Observable<ISelectedShippingContact>} emits with shipping contact information on\n   *   shipping contact selection changes\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopListeningForShippingContactSelection'\n  })\n  startListeningForShippingContactSelection(): Observable<ISelectedShippingContact> {\n    return;\n  }\n\n  /**\n   * Stops listening for shipping contact selection changes\n   * @return {Promise} whether stop listening was successful. This should\n   *   really only fail if this is called without starting listening\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  stopListeningForShippingContactSelection(): Promise<boolean> {\n    return;\n  }\n\n  /**\n   * Update the list of pay sheet items and shipping methods in response to\n   * a shipping contact selection event. This *must* be called in response to\n   * any shipping contact selection event or else the user will not be able\n   * to complete a transaction on the pay sheet. Do not call without\n   * subscribing to shipping contact selection events first\n   * @returns {Promise}\n   *\n   * @param {Object} including `items` and `shippingMethods` properties.\n   *\n   * @usage\n   * this.applePay.startListeningForShippingContactSelection().pluck('shippingAddressState').subscribe(shippingAddressState => {\n   *   let shippingMethods;\n   *   if ('AK' === shippingAddressState) {\n   *     shippingMethods = [{\n   *         identifier: 'Alaska',\n   *         label: 'Alaska',\n   *         detail: 'For shipping to Alaska',\n   *         amount: 9.99\n   *     },];\n   *   } else {\n   *     shippingMethods = [{\n   *         identifier: 'Continental',\n   *         label: 'Continental',\n   *         detail: 'For shipping Continentally',\n   *         amount: 5.99\n   *     }];\n   *   }\n   *   this.paySheetItems.shippingCost = {\n   *      label: 'Shipping Cost',\n   *      amount: shippingMethod[0].amount\n   *   };\n   *   this.applePay.updateItemsAndShippingMethods(this.paySheetItems, shippingMethods);\n   * });\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  updateItemsAndShippingMethods(list: IOrderItemsAndShippingMethods): Promise<IUpdateItemsAndShippingStatus> {\n    return;\n  }\n\n  /**\n   * Request a payment with Apple Pay\n   * @return {Promise<IPaymentResponse>} Returns a promise that resolves when something happens\n   *\n   * @param order {IOrder}\n   *\n   * @usage\n   * try {\n   *   const paymentResponse = this.applePay.makePaymentRequest({\n   *     items: [\n   *       {\n   *         label: '3 x Basket Items',\n   *         amount: 49.99\n   *       },\n   *       {\n   *         label: 'Next Day Delivery',\n   *         amount: 3.99\n   *       },\n   *       {\n   *         label: 'My Fashion Company',\n   *         amount: 53.98\n   *       }\n   *     ],\n   *     shippingMethods: [\n   *       {\n   *         identifier: 'NextDay',\n   *         label: 'NextDay',\n   *         detail: 'Arrives tomorrow by 5pm.',\n   *         amount: 3.99\n   *       },\n   *       {\n   *         identifier: 'Standard',\n   *         label: 'Standard',\n   *         detail: 'Arrive by Friday.',\n   *         amount: 4.99\n   *       },\n   *       {\n   *         identifier: 'SaturdayDelivery',\n   *         label: 'Saturday',\n   *         detail: 'Arrive by 5pm this Saturday.',\n   *         amount: 6.99\n   *       }\n   *     ],\n   *     merchantIdentifier: 'merchant.apple.test',\n   *     currencyCode: 'GBP',\n   *     countryCode: 'GB',\n   *     billingAddressRequirement: 'none',\n   *     shippingAddressRequirement: 'none',\n   *     shippingType: 'shipping',\n   *   });\n   *\n   *   // The user has authorized the payment.\n   *\n   *   // Handle the token, asynchronously, i.e. pass to your merchant bank to\n   *   // action the payment, then once finished, depending on the outcome:\n   *\n   *   // Here is an example implementation:\n   *\n   *   const captureStatus = await MyPaymentProvider.authorizeApplePayToken(paymentResponse.paymentData);\n   *   await this.applePay.completeLastTransaction('success');\n   * }\n   * catch (err) {\n   *   if (isPaymentAuthError(err)) {\n   *     this.completeLastTransaction('failure');\n   *   }\n   *   else {\n   *     // Failed to open pay sheet or user canceled payment\n   *   }\n   * }\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  makePaymentRequest(order: IOrder): Promise<IPaymentResponse> {\n    return;\n  }\n\n  /**\n   * Once the makePaymentRequest has been resolved successfully, the device will be waiting for a completion event.\n   * This means, that the application must proceed with the token authorisation and return a success, failure,\n   * or other validation error. Once this has been passed back, the Apple Pay sheet will be dismissed via an animation.\n   * @return {Promise<ICompleteTransaction>} Returns a promise that resolves after confirmation of payment authorization completion\n   *\n   * @param complete {ITransactionStatus}\n   *\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  completeLastTransaction(complete: ITransactionStatus): Promise<ICompleteTransaction> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/regula-document-reader/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAExE;;;;;;;;;;;;;;;;;GAiBG;AAUH;IAA0C,wCAAiB;IAA3D;;IAqBA,CAAC;IAnBC;;;OAGG;IAEH,yCAAU,GAAV,UAAW,OAAY,IAAS,CAAC;IAEjC;;;OAGG;IAEH,2CAAY,GAAZ,cAAoC,MAAM,CAAC,CAAC,CAAC;IACxC,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAbA;QADC,OAAO,EAAE;;;;0DACuB;IAOjC;QADC,OAAO,EAAE;;;;4DACmC;IAdlC,oBAAoB;QAThC,MAAM,CAAC;YACN,UAAU,EAAE,wBAAwB;YACpC,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,gBAAgB;YAC3B,IAAI,EAAE,sEAAsE;YAC5E,SAAS,EAAE,CAAC,KAAK,EAAE,SAAS,CAAC;YAC7B,OAAO,EAAE,oGAAoG;SAC9G,CAAC;OAEW,oBAAoB,CAqBhC;IAAD,2BAAC;CArBD,AAqBC,CArByC,iBAAiB,GAqB1D;SArBY,oBAAoB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n/**\n * @paid\n * @beta\n * @name Regula Document Reader\n * @description\n * Plugin for reading and validation of identification documents.\n *\n * @usage\n * ```typescript\n * import { RegulaDocumentReader } from '@ionic-native/regula-document-reader';\n *\n * let license; // read regula.license file\n * RegulaDocumentReader.initReader(license); // initialize reader\n * RegulaDocumentReader.scanDocument().then((result) => {\n * \t\t// read result\n * })\n * ```\n */\n@Plugin({\n  pluginName: 'Regula Document Reader',\n  plugin: 'cordova-plugin-documentreader',\n  pluginRef: 'DocumentReader',\n  repo: 'https://github.com/regulaforensics/cordova-plugin-documentreader.git',\n  platforms: ['iOS', 'Android'],\n  install: 'ionic plugin add cordova-plugin-documentreader --variable CAMERA_USAGE_DESCRIPTION=\"To take photo\"',\n})\n\nexport class RegulaDocumentReader extends IonicNativePlugin {\n\n  /**\n   * Initialize the scanner\n   * @param license {any} License data\n   */\n  @Cordova()\n  initReader(license: any): void {}\n\n  /**\n   * Run the scanner\n   * @return {Promise<string[]>} Returns a promise that resolves when results was got, and fails when not\n   */\n  @Cordova()\n  scanDocument(): Promise<string[]> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
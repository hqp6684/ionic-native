{"version":3,"sources":["../../../src/@ionic-native/plugins/ms-adal/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,iBAAA,EAAmB,iBAAA,EAAmB,gBAAA,EAAkB,eAAA,EAAgB,MAAO,oBAAA,CAAqB;AACrH,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAoD3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAmCG;AASH;IAA4B,0BAAiB;IAA7C;;IAgBA,CAAC;eAhBY,MAAM;IAEjB,4CAA2B,GAA3B,UAA4B,SAAiB,EAAE,iBAAiC;QAAjC,kCAAA,EAAA,wBAAiC;QAC9E,IAAI,WAAgB,CAAC;QACrB,EAAE,CAAC,CAAC,iBAAiB,CAAC,QAAM,CAAC,YAAY,EAAE,EAAE,IAAI,EAAE,QAAM,CAAC,aAAa,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YACpF,WAAW,GAAG,IAAI,CAAC,QAAM,CAAC,SAAS,EAAE,CAAC,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QAC1E,CAAC;QACD,MAAM,CAAC,IAAI,qBAAqB,CAAC,WAAW,CAAC,CAAC;IAChD,CAAC;IAEI,iBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAfW,MAAM;QARlB,MAAM,CAAC;YACN,UAAU,EAAE,QAAQ;YACpB,MAAM,EAAE,wBAAwB;YAChC,SAAS,EAAE,gBAAgB;YAC3B,IAAI,EAAE,sEAAsE;YAC5E,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,MAAM,CAgBlB;IAAD,aAAC;;CAhBD,AAgBC,CAhB2B,iBAAiB,GAgB5C;SAhBY,MAAM;AAkBnB;;GAEG;AACH;IAWE,+BAAoB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;IAAG,CAAC;IAE5C;;;;;;;;;;;OAWG;IAIH,iDAAiB,GAAjB,UAAkB,WAAmB,EAAE,QAAgB,EAAE,WAAmB,EAAE,MAAe,EAAE,oBAA0B,IAAmC,MAAM,CAAC,CAAC,CAAC;IAErK;;;;;;;;;OASG;IAIH,uDAAuB,GAAvB,UAAwB,WAAmB,EAAE,QAAgB,EAAE,MAAe,IAAmC,MAAM,CAAC,CAAC,CAAC;IAxC1H;QADC,gBAAgB;;4DACC;IAGlB;QADC,gBAAgB;;oEACU;IAG3B;QADC,gBAAgB;;6DACD;IAmBhB;QAHC,eAAe,CAAC;YACf,YAAY,EAAE,IAAI;SACnB,CAAC;;;;kEACmK;IAerK;QAHC,eAAe,CAAC;YACf,YAAY,EAAE,IAAI;SACnB,CAAC;;;;wEACwH;IAE5H,4BAAC;CA7CD,AA6CC,IAAA;SA7CY,qBAAqB","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, IonicNativePlugin, checkAvailability, InstanceProperty, CordovaInstance } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface AuthenticationResult {\n\n  accessToken: string;\n  accesSTokenType: string;\n  expiresOn: Date;\n  idToken: string;\n  isMultipleResourceRefreshToken: boolean;\n  status: string;\n  statusCode: number;\n  tenantId: string;\n  userInfo: UserInfo;\n\n  /**\n   * Creates authorization header for web requests.\n   * @returns {String} The authorization header.\n   */\n  createAuthorizationHeader(): string;\n\n}\n\nexport interface TokenCache {\n  clear(): void;\n  readItems(): Promise<TokenCacheItem[]>;\n  deleteItem(item: TokenCacheItem): void;\n}\n\nexport interface TokenCacheItem {\n  accessToken: string;\n  authority: string;\n  clientId: string;\n  displayableId: string;\n  expiresOn: Date;\n  isMultipleResourceRefreshToken: boolean;\n  resource: string;\n  tenantId: string;\n  userInfo: UserInfo;\n}\n\nexport interface UserInfo {\n  displayableId: string;\n  userId: string;\n  familyName: string;\n  givenName: string;\n  identityProvider: string;\n  passwordChangeUrl: string;\n  passwordExpiresOn: Date;\n  uniqueId: string;\n}\n\n\n/**\n * @name MS ADAL\n * @description\n * Active Directory Authentication Library (ADAL) plugin.\n * Active Directory Authentication Library ([ADAL](https://docs.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.clients.activedirectory?view=azure-dotnet))\n * plugin provides easy to use authentication functionality for your Apache Cordova apps by taking advantage of\n * Windows Server Active Directory and Windows Azure Active Directory. Here you can find the source code for the library.\n * @usage\n * ```typescript\n * import { MSAdal, AuthenticationContext, AuthenticationResult } from '@ionic-native/ms-adal';\n *\n *\n * constructor(private msAdal: MSAdal) {}\n *\n * ...\n *\n * let authContext: AuthenticationContext = this.msAdal.createAuthenticationContext('https://login.windows.net/common');\n *\n * authContext.acquireTokenAsync('https://graph.windows.net', 'a5d92493-ae5a-4a9f-bcbf-9f1d354067d3', 'http://MyDirectorySearcherApp')\n *   .then((authResponse: AuthenticationResult) => {\n *     console.log('Token is' , authResponse.accessToken);\n *     console.log('Token will expire on', authResponse.expiresOn);\n *   })\n *   .catch((e: any) => console.log('Authentication failed', e));\n *\n *\n * ```\n *\n * @classes\n * AuthenticationContext\n * @interfaces\n * AuthenticationResult\n * TokenCache\n * TokenCacheItem\n * UserInfo\n */\n@Plugin({\n  pluginName: 'MSADAL',\n  plugin: 'cordova-plugin-ms-adal',\n  pluginRef: 'Microsoft.ADAL',\n  repo: 'https://github.com/AzureAD/azure-activedirectory-library-for-cordova',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n\nexport class MSAdal extends IonicNativePlugin {\n\n  createAuthenticationContext(authority: string, validateAuthority: boolean = true) {\n    let authContext: any;\n    if (checkAvailability(MSAdal.getPluginRef(), null, MSAdal.getPluginName()) === true) {\n      authContext = new (MSAdal.getPlugin()).AuthenticationContext(authority);\n    }\n    return new AuthenticationContext(authContext);\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\n/**\n * @hidden\n */\nexport class AuthenticationContext {\n\n  @InstanceProperty\n  authority: string;\n\n  @InstanceProperty\n  validateAuthority: boolean;\n\n  @InstanceProperty\n  tokenCache: any;\n\n  constructor(private _objectInstance: any) {}\n\n  /**\n   * Acquires token using interactive flow. It always shows UI and skips token from cache.\n   *\n   * @param   {String}  resourceUrl Resource identifier\n   * @param   {String}  clientId    Client (application) identifier\n   * @param   {String}  redirectUrl Redirect url for this application\n   * @param   {String}  userId      User identifier (optional)\n   * @param   {String}  extraQueryParameters\n   *                                Extra query parameters (optional)\n   *                                Parameters should be escaped before passing to this method (e.g. using 'encodeURI()')\n   * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error\n   */\n  @CordovaInstance({\n    otherPromise: true\n  })\n  acquireTokenAsync(resourceUrl: string, clientId: string, redirectUrl: string, userId?: string, extraQueryParameters?: any): Promise<AuthenticationResult> { return; }\n\n  /**\n   * Acquires token WITHOUT using interactive flow. It checks the cache to return existing result\n   * if not expired. It tries to use refresh token if available. If it fails to get token without\n   * displaying UI it will fail. This method guarantees that no UI will be shown to user.\n   *\n   * @param   {String}  resourceUrl Resource identifier\n   * @param   {String}  clientId    Client (application) identifier\n   * @param   {String}  userId      User identifier (optional)\n   * @returns {Promise} Promise either fulfilled with AuthenticationResult object or rejected with error\n   */\n  @CordovaInstance({\n    otherPromise: true\n  })\n  acquireTokenSilentAsync(resourceUrl: string, clientId: string, userId?: string): Promise<AuthenticationResult> { return; }\n\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
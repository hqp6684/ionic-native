{"version":3,"sources":["../../../src/@ionic-native/plugins/in-app-purchase/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkDG;AASH;IAAmC,iCAAiB;IAApD;;IAqEA,CAAC;IAnEC;;;;OAIG;IAIH,mCAAW,GAAX,UAAY,SAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1D;;;;OAIG;IAIH,2BAAG,GAAH,UAAI,SAAiB,IAAiG,MAAM,CAAC,CAAC,CAAC;IAE/H;;;;OAIG;IAIH,iCAAS,GAAT,UAAU,SAAiB,IAAiG,MAAM,CAAC,CAAC,CAAC;IAErI;;;;;;OAMG;IAIH,+BAAO,GAAP,UAAQ,WAAmB,EAAE,OAAe,EAAE,SAAiB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE1F;;;OAGG;IAIH,wCAAgB,GAAhB,cAAmC,MAAM,CAAC,CAAC,CAAC;IAE5C;;;OAGG;IAKH,kCAAU,GAAV,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEpC,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA1DA;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;oDACwD;IAU1D;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;4CAC6H;IAU/H;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;kDACmI;IAYrI;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;gDACwF;IAS1F;QAHC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;SACnB,CAAC;;;;yDAC0C;IAU5C;QAJC,OAAO,CAAC;YACP,YAAY,EAAE,IAAI;YAClB,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;mDACuC;IA7D9B,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,8BAA8B;YACtC,SAAS,EAAE,eAAe;YAC1B,IAAI,EAAE,4DAA4D;YAClE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,aAAa,CAqEzB;IAAD,oBAAC;CArED,AAqEC,CArEkC,iBAAiB,GAqEnD;SArEY,aAAa","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name In App Purchase\n * @description\n * A lightweight Cordova plugin for in app purchases on iOS/Android.\n *\n * @usage\n * ```typescript\n * import { InAppPurchase } from '@ionic-native/in-app-purchase';\n *\n * constructor(private iap: InAppPurchase) { }\n *\n * ...\n *\n * this.iap\n *  .getProducts(['prod1', 'prod2', ...])\n *  .then((products) => {\n *    console.log(products);\n *     //  [{ productId: 'com.yourapp.prod1', 'title': '...', description: '...', price: '...' }, ...]\n *  })\n *  .catch((err) => {\n *    console.log(err);\n *  });\n *\n *\n * this.iap\n *   .buy('prod1')\n *   .then((data)=> {\n *     console.log(data);\n *     // {\n *     //   transactionId: ...\n *     //   receipt: ...\n *     //   signature: ...\n *     // }\n *   })\n *   .catch((err)=> {\n *     console.log(err);\n *   });\n *\n * ```\n *\n * @advanced\n *\n * ```typescript\n * // fist buy the product...\n * this.iap\n *   .buy('consumable_prod1')\n *   .then(data => this.iap.consume(data.productType, data.receipt, data.signature))\n *   .then(() => console.log('product was successfully consumed!'))\n *   .catch( err=> console.log(err))\n * ```\n */\n@Plugin({\n  pluginName: 'InAppPurchase',\n  plugin: 'cordova-plugin-inapppurchase',\n  pluginRef: 'inAppPurchase',\n  repo: 'https://github.com/AlexDisler/cordova-plugin-inapppurchase',\n  platforms: ['Android', 'iOS']\n})\n\nexport class InAppPurchase extends IonicNativePlugin {\n\n  /**\n   * Retrieves a list of full product data from Apple/Google. This method must be called before making purchases.\n   * @param {array<string>} productId an array of product ids.\n   * @returns {Promise<any>} Returns a Promise that resolves with an array of objects.\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  getProducts(productId: string[]): Promise<any> { return; }\n\n  /**\n   * Buy a product that matches the productId.\n   * @param {string} productId A string that matches the product you want to buy.\n   * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  buy(productId: string): Promise<{ transactionId: string, receipt: string, signature: string, productType: string }> { return; }\n\n  /**\n   * Same as buy, but for subscription based products.\n   * @param {string} productId A string that matches the product you want to subscribe to.\n   * @returns {Promise<{transactionId: string, receipt: string, signature: string, productType: string}>} Returns a Promise that resolves with the transaction details.\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  subscribe(productId: string): Promise<{ transactionId: string, receipt: string, signature: string, productType: string }> { return; }\n\n  /**\n   * Call this function after purchasing a \"consumable\" product to mark it as consumed. On Android, you must consume products that you want to let the user purchase multiple times. If you will not consume the product after a purchase, the next time you will attempt to purchase it you will get the error message:\n   * @param {string} productType\n   * @param {string} receipt\n   * @param {string} signature\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  consume(productType: string, receipt: string, signature: string): Promise<any> { return; }\n\n  /**\n   * Restore all purchases from the store\n   * @returns {Promise<any>} Returns a promise with an array of purchases.\n   */\n  @Cordova({\n    otherPromise: true\n  })\n  restorePurchases(): Promise<any> { return; }\n\n  /**\n   * Get the receipt.\n   * @returns {Promise<string>} Returns a promise that contains the string for the receipt\n   */\n  @Cordova({\n    otherPromise: true,\n    platforms: ['iOS']\n  })\n  getReceipt(): Promise<string> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/taptic-engine/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAE3C;;;;;;;;;;;;;;;;;;;;;;GAsBG;AASH;IAAkC,gCAAiB;IAAnD;;IAiCA,CAAC;IA/BC;;;OAGG;IAEH,gCAAS,GAAT,cAA4B,MAAM,CAAC,CAAC,CAAC;IAErC;;;;;OAKG;IAEH,mCAAY,GAAZ,UAAa,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEjE;;;;;OAKG;IAEH,6BAAM,GAAN,UAAO,OAA0B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvD,uBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAzBA;QADC,OAAO,EAAE;;;;iDAC2B;IASrC;QADC,OAAO,EAAE;;;;oDACuD;IASjE;QADC,OAAO,EAAE;;;;8CACkD;IAzBjD,YAAY;QARxB,MAAM,CAAC;YACN,UAAU,EAAE,cAAc;YAC1B,MAAM,EAAE,8BAA8B;YACtC,SAAS,EAAE,cAAc;YACzB,IAAI,EAAE,gEAAgE;YACtE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,YAAY,CAiCxB;IAAD,mBAAC;CAjCD,AAiCC,CAjCiC,iBAAiB,GAiClD;SAjCY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\n/**\n * @name Taptic Engine\n * @description\n * An Ionic plugin to use Taptic Engine API on iPhone 7, 7 Plus or newer.\n *\n * @usage\n * ```typescript\n * import { TapticEngine } from '@ionic-native/taptic-engine';\n *\n * ...\n *\n * constructor(private taptic: TapticEngine) { }\n *\n * ...\n *\n * this.taptic.selection();\n *\n * this.taptic.notification();\n *\n * this.taptic.impact();\n *\n * ```\n */\n@Plugin({\n  pluginName: 'TapticEngine',\n  plugin: 'cordova-plugin-taptic-engine',\n  pluginRef: 'TapticEngine',\n  repo: 'https://github.com/EddyVerbruggen/cordova-plugin-taptic-engine',\n  platforms: ['iOS']\n})\n\nexport class TapticEngine extends IonicNativePlugin {\n\n  /**\n   * Use selection feedback generators to indicate a change in selection.\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  selection(): Promise<any> { return; }\n\n  /**\n   * Use this to indicate success/failure/warning to the user.\n   * @param options {Object} should be of the type { type: 'success' } (or 'warning'/'error')\n   * @param options.type {string}\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  notification(options: { type: string }): Promise<any> { return; }\n\n  /**\n   * Use this to indicate success/failure/warning to the user.\n   * @param options {Object} should be of the type { style: 'light' } (or 'medium'/'heavy')\n   * @param options.type {string}\n   * @returns {Promise<any>} Returns a promise that resolves on success and rejects on error\n   */\n  @Cordova()\n  impact(options: { style: string }): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/broadcaster/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAE7C;;;;;;;;;;;;;;;;;;;;GAoBG;AASH;IAAiC,+BAAiB;IAAlD;;IA6BA,CAAC;IA3BC;;;;OAIG;IAMH,sCAAgB,GAAhB,UAAiB,SAAiB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;;;OAKG;IAEH,qCAAe,GAAf,UAAgB,SAAiB,EAAE,SAAc,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvE,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhBA;QALC,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;YAChB,aAAa,EAAE,qBAAqB;YACpC,aAAa,EAAE,IAAI;SACpB,CAAC;;;wCACmC,UAAU;uDAAiB;IAShE;QADC,OAAO,EAAE;;;;sDACkE;IArBjE,WAAW;QARvB,MAAM,CAAC;YACN,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,4BAA4B;YACpC,SAAS,EAAE,aAAa;YACxB,IAAI,EAAE,oDAAoD;YAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,WAAW,CA6BvB;IAAD,kBAAC;CA7BD,AA6BC,CA7BgC,iBAAiB,GA6BjD;SA7BY,WAAW","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * @name Broadcaster\n * @description\n * This plugin adds exchanging events between native code and your app.\n *\n * @usage\n * ```typescript\n * import { Broadcaster } from '@ionic-native/broadcaster';\n *\n * constructor(private broadcaster: Broadcaster) { }\n *\n * ...\n *\n * // Listen to events from Native\n * this.broadcaster.addEventListener('eventName').subscribe((event) => console.log(event));\n *\n * // Send event to Native\n * this.broadcaster.fireNativeEvent('eventName', {}).then(() => console.log('success'));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'Broadcaster',\n  plugin: 'cordova-plugin-broadcaster',\n  pluginRef: 'broadcaster',\n  repo: 'https://github.com/bsorrentino/cordova-broadcaster',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Broadcaster extends IonicNativePlugin {\n\n  /**\n   * This function listen to an event sent from the native code\n   * @param eventName {string}\n   * @return {Observable<any>} Returns an observable to watch when an event is received\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'removeEventListener',\n    clearWithArgs: true\n  })\n  addEventListener(eventName: string): Observable<any> { return; }\n\n  /**\n   * This function sends data to the native code\n   * @param eventName {string}\n   * @param eventData {any}\n   * @return {Promise<any>} Returns a promise that resolves when an event is successfully fired\n   */\n  @Cordova()\n  fireNativeEvent(eventName: string, eventData: any): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
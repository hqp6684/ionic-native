{"version":3,"sources":["../../../src/@ionic-native/plugins/safari-view-controller/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAe7C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAuCG;AASH;IAA0C,wCAAiB;IAA3D;;IAuDA,CAAC;IArDC;;;OAGG;IAEH,0CAAW,GAAX,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;;OAIG;IAMH,mCAAI,GAAJ,UAAK,OAAqC,IAAqB,MAAM,CAAC,CAAC,CAAC;IAExE;;OAEG;IAEH,mCAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;OAGG;IAEH,+CAAgB,GAAhB,cAAmC,MAAM,CAAC,CAAC,CAAC;IAE5C;;;OAGG;IAEH,qCAAM,GAAN,cAAyB,MAAM,CAAC,CAAC,CAAC;IAElC;;;;OAIG;IAEH,2CAAY,GAAZ,UAAa,GAAW,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9C,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA/CA;QADC,OAAO,EAAE;;;;2DACiC;IAY3C;QALC,OAAO,CAAC;YACP,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;YACb,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCAC2C,UAAU;oDAAiB;IAMxE;QADC,OAAO,EAAE;;;;oDACsB;IAOhC;QADC,OAAO,EAAE;;;;gEACkC;IAO5C;QADC,OAAO,EAAE;;;;sDACwB;IAQlC;QADC,OAAO,EAAE;;;;4DACyC;IA/CxC,oBAAoB;QARhC,MAAM,CAAC;YACN,UAAU,EAAE,sBAAsB;YAClC,MAAM,EAAE,qCAAqC;YAC7C,SAAS,EAAE,sBAAsB;YACjC,IAAI,EAAE,uEAAuE;YAC7E,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,oBAAoB,CAuDhC;IAAD,2BAAC;CAvDD,AAuDC,CAvDyC,iBAAiB,GAuD1D;SAvDY,oBAAoB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface SafariViewControllerOptions {\n  animated?: boolean;\n  barColor?: string;\n  controlTintColor?: string;\n  enterReaderModeIfAvailable?: boolean;\n  hidden?: boolean;\n  showDefaultShareMenuItem?: boolean;\n  tintColor?: string;\n  toolbarColor?: string;\n  transition?: string;\n  url?: string;\n}\n\n/**\n * @name Safari View Controller\n * @description\n * @usage\n * ```typescript\n * import { SafariViewController } from '@ionic-native/safari-view-controller';\n *\n * constructor(private safariViewController: SafariViewController) { }\n *\n * ...\n *\n * this.safariViewController.isAvailable()\n *   .then((available: boolean) => {\n *       if (available) {\n *\n *         this.safariViewController.show({\n *           url: 'http://ionic.io',\n *           hidden: false,\n *           animated: false,\n *           transition: 'curl',\n *           enterReaderModeIfAvailable: true,\n *           tintColor: '#ff0000'\n *         })\n *         .subscribe((result: any) => {\n *             if(result.event === 'opened') console.log('Opened');\n *             else if(result.event === 'loaded') console.log('Loaded');\n *             else if(result.event === 'closed') console.log('Closed');\n *           },\n *           (error: any) => console.error(error)\n *         );\n *\n *       } else {\n *         // use fallback browser, example InAppBrowser\n *       }\n *     }\n *   );\n * ```\n * @interfaces\n * SafariViewControllerOptions\n */\n@Plugin({\n  pluginName: 'SafariViewController',\n  plugin: 'cordova-plugin-safariviewcontroller',\n  pluginRef: 'SafariViewController',\n  repo: 'https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller',\n  platforms: ['Android', 'iOS']\n})\n\nexport class SafariViewController extends IonicNativePlugin {\n\n  /**\n   * Checks if SafariViewController is available\n   * @returns {Promise<boolean>}\n   */\n  @Cordova()\n  isAvailable(): Promise<boolean> { return; }\n\n  /**\n   * Shows Safari View Controller\n   * @param options {SafariViewControllerOptions} optional\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2,\n    observable: true\n  })\n  show(options?: SafariViewControllerOptions): Observable<any> { return; }\n\n  /**\n   * Hides Safari View Controller\n   */\n  @Cordova()\n  hide(): Promise<any> { return; }\n\n  /**\n   * Tries to connect to the  Chrome's custom tabs service. you must call this method before calling any of the other methods listed below.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  connectToService(): Promise<any> { return; }\n\n  /**\n   * Call this method whenever there's a chance the user will open an external url.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  warmUp(): Promise<any> { return; }\n\n  /**\n   * For even better performance optimization, call this methods if there's more than a 50% chance the user will open a certain URL.\n   * @param url{string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  mayLaunchUrl(url: string): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
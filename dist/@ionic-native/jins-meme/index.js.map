{"version":3,"sources":["../../../src/@ionic-native/plugins/jins-meme/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, CordovaCheck, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\ndeclare const cordova: any;\n\n/**\n * @name Jins Meme\n * @description\n * Implementation of the JINS MEME SDK\n *\n * @usage\n * ```typescript\n * import { JinsMeme } from '@ionic-native/jins-meme';\n *\n * constructor(private jinsMeme: JinsMeme) { }\n *\n * ...\n *\n * this.jinsMeme.setAppClientID(appClientId: string, clientSecret: string).then(\n *   // Bluetooth should be enabled and the JINS MEME powered on (blinking blue light)\n *   this.jinsMeme.startScan().subscribe((meme_addr) => {\n *     this.jinsMeme.connect(meme_addr).subscribe((connectResult) => {\n *       this.memeService.startDataReport().subscribe((dataReport) => {\n *         console.log(dataReport);\n *       });\n *     });\n *   });\n * .catch(console.log('jinsMeme.setAppClientID authentication error'));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'JINS MEME ES',\n  plugin: 'cordova-plugin-jins-meme-es',\n  pluginRef: 'com.jins_jp.meme.plugin',\n  repo: 'https://github.com/BlyncSync/cordova-plugin-jins-meme-es',\n  platforms: ['Android', 'iOS']\n})\n\nexport class JinsMeme extends IonicNativePlugin {\n  /**\n   * Authentication and authorization of App and SDK.\n   * Must call this method first.\n   * Sign up for an app ID (and get an app/client secret) at developers.jins.com\n   *\n   *@param {string} setAppClientID\n   *@param {string} clientSecret\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  setAppClientID(appClientId: string, clientSecret: string): Promise<any> { return; }\n  /**\n   * Starts scanning for JINS MEME.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopScan',\n    clearWithArgs: true\n  })\n  startScan(): Observable<any> { return; }\n  /**\n   * Stops scanning JINS MEME.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stopScan(): Promise<any> { return; }\n  /**\n   * Establishes connection to JINS MEME.\n   * @param {string} target\n   * @returns {Observable<any>}\n   */\n  @CordovaCheck({\n    observable: true\n  })\n  connect(target: string): Observable<any> {\n    return new Observable<any>((observer: any) => {\n      let data = cordova.plugins.JinsMemePlugin.connect(target, observer.next.bind(observer), observer.complete.bind(observer), observer.error.bind(observer));\n      return () => console.log(data);\n    });\n  }\n  /**\n   * Set auto connection mode.\n   *@param {Boolean} flag\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  setAutoConnect(flag: boolean): Promise<any> { return; }\n  /**\n   * Returns whether a connection to JINS MEME has been established.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  isConnected(): Promise<any> { return; }\n  /**\n   * Disconnects from JINS MEME.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  disconnect(): Promise<any> { return; }\n  /**\n   * Starts receiving realtime data.\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true,\n    clearFunction: 'stopDataReport',\n    clearWithArgs: true\n  })\n  startDataReport(): Observable<any> { return; }\n  /**\n  * Stops receiving data.\n  *@returns {Promise<any>}\n  */\n  @Cordova()\n  stopDataReport(): Promise<any> { return; }\n  /**\n   * Returns SDK version.\n   *\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getSDKVersion(): Promise<any> { return; }\n  /**\n   * Returns JINS MEME connected with other apps.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getConnectedByOthers(): Promise<any> { return; }\n  /**\n   * Returns calibration status\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  isCalibrated(): Promise<any> { return; }\n  /**\n   * Returns device type.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getConnectedDeviceType(): Promise<any> { return; }\n  /**\n   * Returns hardware version.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getConnectedDeviceSubType(): Promise<any> { return; }\n  /**\n   * Returns FW Version.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getFWVersion(): Promise<any> { return; }\n  /**\n   * Returns HW Version.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  getHWVersion(): Promise<any> { return; }\n  /**\n   * Returns response about whether data was received or not.\n   *@returns {Promise<any>}\n   */\n  @Cordova()\n  isDataReceiving(): Promise<any> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
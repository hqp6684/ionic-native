{"version":3,"sources":["../../../src/@ionic-native/plugins/health-kit/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAQ,oBAAA,CAAqB;AACzE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAmH3C;;;;;;;;;;;;;;;;;;GAkBG;AASH;IAA+B,6BAAiB;IAAhD;;IA2KA,CAAC;IAzKC;;;KAGC;IAED,6BAAS,GAAT,cAA4B,MAAM,CAAC,CAAC,CAAC;IAErC;;;;KAIC;IAED,mCAAe,GAAf,UAAgB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;;KAIC;IAED,wCAAoB,GAApB,UAAqB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEzE;;;KAGC;IAED,mCAAe,GAAf,cAAkC,MAAM,CAAC,CAAC,CAAC;IAE3C;;;KAGC;IAED,8BAAU,GAAV,cAA6B,MAAM,CAAC,CAAC,CAAC;IAEtC;;;KAGC;IAED,iCAAa,GAAb,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEzC;;;KAGC;IAED,2CAAuB,GAAvB,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;;KAIC;IAED,8BAAU,GAAV,UAAW,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/D;;;;KAIC;IAED,8BAAU,GAAV,UAAW,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/D;;;;KAIC;IAED,8BAAU,GAAV,UAAW,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/D;;;;KAIC;IAED,8BAAU,GAAV,UAAW,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE/D;;;KAGC;IAED,gCAAY,GAAZ,cAA+B,MAAM,CAAC,CAAC,CAAC;IAExC;;;;KAIC;IAED,+BAAW,GAAX,UAAY,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;;KAIC;IAED,mCAAe,GAAf,UAAgB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;;KAIC;IAED,6CAAyB,GAAzB,UAA0B,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE9E;;;;KAIC;IAED,iCAAa,GAAb,UAAc,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElE;;;;KAIC;IAED,qCAAiB,GAAjB,UAAkB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtE;;;;KAIC;IAED,mCAAe,GAAf,UAAgB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;;KAIC;IAED,sCAAkB,GAAlB,UAAmB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvE;;;;KAIC;IAED,mCAAe,GAAf,UAAgB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEpE;;;;KAIC;IAED,wCAAoB,GAApB,UAAqB,OAAyB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAGpE,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAnKA;QADC,OAAO,EAAE;;;;8CAC2B;IAQrC;QADC,OAAO,EAAE;;;;oDAC0D;IAQpE;QADC,OAAO,EAAE;;;;yDAC+D;IAOzE;QADC,OAAO,EAAE;;;;oDACiC;IAO3C;QADC,OAAO,EAAE;;;;+CAC4B;IAOtC;QADC,OAAO,EAAE;;;;kDAC+B;IAOzC;QADC,OAAO,EAAE;;;;4DACyC;IAQnD;QADC,OAAO,EAAE;;;;+CACqD;IAQ/D;QADC,OAAO,EAAE;;;;+CACqD;IAQ/D;QADC,OAAO,EAAE;;;;+CACqD;IAQ/D;QADC,OAAO,EAAE;;;;+CACqD;IAO/D;QADC,OAAO,EAAE;;;;iDAC8B;IAQxC;QADC,OAAO,EAAE;;;;gDACsD;IAQhE;QADC,OAAO,EAAE;;;;oDAC0D;IAQpE;QADC,OAAO,EAAE;;;;8DACoE;IAQ9E;QADC,OAAO,EAAE;;;;kDACwD;IAQlE;QADC,OAAO,EAAE;;;;sDAC4D;IAQtE;QADC,OAAO,EAAE;;;;oDAC0D;IAQpE;QADC,OAAO,EAAE;;;;uDAC6D;IAQvE;QADC,OAAO,EAAE;;;;oDAC0D;IAQpE;QADC,OAAO,EAAE;;;;yDAC+D;IAlK9D,SAAS;QARrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,0BAA0B;YACrC,IAAI,EAAE,uDAAuD;YAC7D,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,SAAS,CA2KrB;IAAD,gBAAC;CA3KD,AA2KC,CA3K8B,iBAAiB,GA2K/C;SA3KY,SAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin  } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface HealthKitOptions {\n  /**\n  * HKWorkoutActivityType constant\n  * Read more here: https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKWorkout_Class/#//apple_ref/c/tdef/HKWorkoutActivityType\n  */\n  activityType?: string; //\n\n  /**\n  * 'hour', 'week', 'year' or 'day', default 'day'\n  */\n  aggregation?: string;\n\n  /**\n  *\n  */\n  amount?: number;\n\n  /**\n  *\n  */\n  correlationType?: string;\n\n  /**\n  *\n  */\n  date?: any;\n\n  /**\n  *\n  */\n  distance?: number;\n\n  /**\n  * probably useful with the former param\n  */\n  distanceUnit?: string;\n\n  /**\n  * in seconds, optional, use either this or endDate\n  */\n  duration?: number;\n\n  /**\n  *\n  */\n  endDate?: any;\n\n  /**\n  *\n  */\n  energy?: number;\n\n  /**\n  * J|cal|kcal\n  */\n  energyUnit?: string;\n\n  /**\n  *\n  */\n  extraData?: any;\n\n  /**\n  *\n  */\n  metadata?: any;\n\n  /**\n  *\n  */\n  quantityType?: string;\n\n  /**\n  *\n  */\n  readTypes?: any;\n\n  /**\n  *\n  */\n  requestWritePermission?: boolean;\n\n  /**\n  *\n  */\n  samples?: any;\n\n  /**\n  *\n  */\n  sampleType?: string;\n\n  /**\n  *\n  */\n  startDate?: any;\n\n  /**\n  * m|cm|mm|in|ft\n  */\n  unit?: string;\n\n  /**\n  *\n  */\n  requestReadPermission?: boolean;\n\n  /**\n  *\n  */\n  writeTypes?: any;\n}\n\n/**\n * @name Health Kit\n * @description\n * The HealthKit plugin allows you to read data from and write data to the iOS 8+ HealthKit framework.\n * Any data saved shows up in the iOS Health app and is available for other iOS apps.\n *\n * @usage\n * ```typescript\n * import { HealthKit } from '@ionic-native/health-kit';\n *\n *\n * constructor(private healthKit: HealthKit) { }\n *\n * ...\n * ```\n *\n * @interfaces\n * HealthKitOptions\n */\n@Plugin({\n  pluginName: 'HealthKit',\n  plugin: 'com.telerik.plugins.healthkit',\n  pluginRef: 'window.plugins.healthkit',\n  repo: 'https://github.com/Telerik-Verified-Plugins/HealthKit',\n  platforms: ['iOS']\n})\n\nexport class HealthKit extends IonicNativePlugin {\n\n  /**\n * Check if HealthKit is supported (iOS8+, not on iPad)\n * @returns {Promise<any>}\n */\n  @Cordova()\n  available(): Promise<any> { return; }\n\n  /**\n * Pass in a type and get back on of undetermined | denied | authorized\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  checkAuthStatus(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * Ask some or all permissions up front\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  requestAuthorization(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * Formatted as yyyy-MM-dd\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readDateOfBirth(): Promise<any> { return; }\n\n  /**\n * Output = male|female|other|unknown\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readGender(): Promise<any> { return; }\n\n  /**\n * Output = A+|A-|B+|B-|AB+|AB-|O+|O-|unknown\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readBloodType(): Promise<any> { return; }\n\n  /**\n * Output = I|II|III|IV|V|VI|unknown\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readFitzpatrickSkinType(): Promise<any> { return; }\n\n  /**\n * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone) and amount\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  saveWeight(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * Pass in unit (g=gram, kg=kilogram, oz=ounce, lb=pound, st=stone)\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readWeight(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot) and amount\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  saveHeight(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * Pass in unit (mm=millimeter, cm=centimeter, m=meter, in=inch, ft=foot)\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  readHeight(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n * no params yet, so this will return all workouts ever of any type\n * @returns {Promise<any>}\n */\n  @Cordova()\n  findWorkouts(): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  saveWorkout(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  querySampleType(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  querySampleTypeAggregated(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  deleteSamples(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  monitorSampleType(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  sumQuantityType(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  saveQuantitySample(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  saveCorrelation(options: HealthKitOptions): Promise<any> { return; }\n\n  /**\n *\n * @param options {HealthKitOptions}\n * @returns {Promise<any>}\n */\n  @Cordova()\n  queryCorrelationType(options: HealthKitOptions): Promise<any> { return; }\n\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/gyroscope/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,iBAAA,CAAkB;AAC7C,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAuC3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAiCG;AASH;IAA+B,6BAAiB;IAAhD;;IA+BA,CAAC;IA7BC;;;;OAIG;IACH,yBAAK,GAAL,UAAM,OAA0B;QAC9B,MAAM,CAAC,IAAI,UAAU,CACnB,UAAC,QAAa;YACZ,IAAI,OAAO,GAAG,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;YAC7G,MAAM,CAAC,cAAM,OAAA,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,EAAvC,CAAuC,CAAC;QACvD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IAIH,8BAAU,GAAV,UAAW,OAA0B,IAAmC,MAAM,CAAC,CAAC,CAAC;IAC5E,oBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,wBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IANA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;+CAC+E;IAxBtE,SAAS;QARrB,MAAM,CAAC;YACN,UAAU,EAAE,WAAW;YACvB,MAAM,EAAE,0BAA0B;YAClC,SAAS,EAAE,qBAAqB;YAChC,IAAI,EAAE,oDAAoD;YAC1D,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,SAAS,CA+BrB;IAAD,gBAAC;CA/BD,AA+BC,CA/B8B,iBAAiB,GA+B/C;SA/BY,SAAS","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\n\ndeclare const navigator: any;\n\n/**\n *  @hidden\n */\nexport interface GyroscopeOrientation {\n  /**\n   *  Represent x-axis\n   */\n  x: number;\n\n  /**\n   *  Represent y-axis\n   */\n  y: number;\n\n  /**\n   *  Represent z-axis\n   */\n  z: number;\n\n  /**\n   *  Represent timestamp of sensor read. Default is 10000ms\n   */\n  timestamp: number;\n}\n\n/**\n *  @hidden\n */\nexport interface GyroscopeOptions {\n  /**\n   *  Represent how often (in milliseconds) sensor should be read.  Default is 10000 ms\n   */\n  frequency: number;\n}\n\n/**\n * @name Gyroscope\n * @description Read Gyroscope sensor data\n * @usage\n * ```typescript\n * import { Gyroscope, GyroscopeOrientation, GyroscopeOptions } from '@ionic-native/gyroscope';\n *\n *\n * constructor(private gyroscope: Gyroscope) { }\n *\n * ...\n *\n *\n * let options: GyroscopeOptions = {\n *    frequency: 1000\n * };\n *\n * this.gyroscope.getCurrent(options)\n *   .then((orientation: GyroscopeOrientation) => {\n *      console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);\n *    })\n *   .catch()\n *\n *\n * this.gyroscope.watch()\n *    .subscribe((orientation: GyroscopeOrientation) => {\n *       console.log(orientation.x, orientation.y, orientation.z, orientation.timestamp);\n *    });\n *\n * ```\n * @interfaces\n * GyroscopeOrientation\n * GyroscopeOptions\n */\n@Plugin({\n  pluginName: 'Gyroscope',\n  plugin: 'cordova-plugin-gyroscope',\n  pluginRef: 'navigator.gyroscope',\n  repo: 'https://github.com/NeoLSN/cordova-plugin-gyroscope',\n  platforms: ['Android', 'iOS']\n})\n\nexport class Gyroscope extends IonicNativePlugin {\n\n  /**\n   * Watching for gyroscope sensor changes\n   * @param {GyroscopeOptions} [options]\n   * @return {Observable<GyroscopeOrientation>} Returns an Observable that resolves GyroscopeOrientation\n   */\n  watch(options?: GyroscopeOptions): Observable<GyroscopeOrientation> {\n    return new Observable<GyroscopeOrientation>(\n      (observer: any) => {\n        let watchId = navigator.gyroscope.watch(observer.next.bind(observer), observer.next.bind(observer), options);\n        return () => navigator.gyroscope.clearWatch(watchId);\n      }\n    );\n  }\n\n  /**\n   * Get current data from gyroscope sensor\n   * @param {GyroscopeOptions} [options]\n   * @return {Promise<GyroscopeOrientation>} Returns a promise that resolves GyroscopeOrientation\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getCurrent(options?: GyroscopeOptions): Promise<GyroscopeOrientation> { return; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/flurry-analytics/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,MAAA,EAAQ,eAAA,EAAiB,iBAAA,EAAmB,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACnG,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAyE3C;;EAEE;AACF;IAEE,+BAAoB,eAAoB;QAApB,oBAAe,GAAf,eAAe,CAAK;IAAI,CAAC;IAE7C;;;;;OAKG;IAKH,wCAAQ,GAAR,UAAS,SAAiB,EAAE,MAAY;QACtC,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAKH,+CAAe,GAAf,UAAgB,SAAiB,EAAE,MAAe;QAChD,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAKH,6CAAa,GAAb,UAAc,SAAiB,EAAE,MAAe;QAC9C,MAAM,CAAC;IACT,CAAC;IAED;;;;;OAKG;IAEH,wCAAQ,GAAR,UAAS,IAAS,EAAE,OAAY;QAC9B,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,2CAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;;;OAMG;IAEH,2CAAW,GAAX,UAAY,QAAiC,EAAE,OAAe;QAC5D,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,4CAAY,GAAZ;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,0CAAU,GAAV;QACE,MAAM,CAAC;IACT,CAAC;IAlFD;QAJC,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;;;yDAGD;IAYD;QAJC,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;iDAC0C,MAAM;;gEAEjD;IAYD;QAJC,eAAe,CAAC;YACf,YAAY,EAAE,CAAC;YACf,UAAU,EAAE,CAAC;SACd,CAAC;;iDACwC,MAAM;;8DAE/C;IASD;QADC,eAAe,EAAE;;;;yDAGjB;IAOD;QADC,eAAe,EAAE;;;;4DAGjB;IAUD;QADC,eAAe,EAAE;;;;4DAGjB;IAQD;QADC,eAAe,EAAE;;;;6DAGjB;IAQD;QADC,eAAe,EAAE;;;;2DAGjB;IAEH,4BAAC;CAlGD,AAkGC,IAAA;SAlGY,qBAAqB;AAoGlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA+BG;AASH;IAAqC,mCAAiB;IAAtD;;IAyBA,CAAC;wBAzBY,eAAe;IAE1B;;;;OAIG;IACH,gCAAM,GAAN,UAAO,OAA+B;QAEpC,IAAI,QAAa,CAAC;QAElB,EAAE,CAAC,CAAC,iBAAiB,CAAC,iBAAe,CAAC,SAAS,EAAE,IAAI,EAAE,iBAAe,CAAC,UAAU,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAC5F,QAAQ,GAAG,IAAK,MAAc,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC1D,CAAC;QAED,MAAM,CAAC,IAAI,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IAE7C,CAAC;IAEI,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAxBW,eAAe;QAR3B,MAAM,CAAC;YACN,UAAU,EAAE,iBAAiB;YAC7B,MAAM,EAAE,gCAAgC;YACxC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,4DAA4D;YAClE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC;SAC9B,CAAC;OAEW,eAAe,CAyB3B;IAAD,sBAAC;;CAzBD,AAyBC,CAzBoC,iBAAiB,GAyBrD;SAzBY,eAAe","file":"index.js","sourceRoot":"","sourcesContent":["import { Plugin, CordovaInstance, checkAvailability, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface FlurryAnalyticsOptions {\n  /** Flurry API key is required */\n  appKey: string;\n  /**\n   * Overrides the version of the app\n   */\n  version?: string;\n  /**\n   * How long can the app be paused before a new session is created,\n   * must be less than or equal to five for Android devices\n   */\n  continueSessionSeconds?: number;\n  /**\n   * Set id of the user\n   */\n  userId?: string;\n  /**\n   * Set gender of the user\n   * Valid values are \"m\", \"M\", \"f\" and \"F\"\n   */\n  gender?: string;\n  /**\n   * Set age of the user\n   */\n  age?: number;\n  /**\n   * Set error for log\n   * Values: VERBOSE, DEBUG, INFO, WARN, ERROR\n   */\n  logLevel?: string;\n  /**\n   * Defaults to false\n   */\n  enableLogging?: boolean;\n  /**\n   * Should every event show up the app's log, defaults to true\n   */\n  enableEventLogging?: boolean;\n  /**\n   * Should app crashes be recorded in flurry, defaults to false, iOS only\n   */\n  enableCrashReporting?: boolean;\n  /**\n   * Should the session continue when the app is the background, defaults to false, iOS only\n   */\n  enableBackgroundSessions?: boolean;\n  /**\n   * Should data be pushed to flurry when the app closes, defaults to true, iOS only\n   */\n  reportSessionsOnClose?: boolean;\n  /**\n   * Should data be pushed to flurry when the app is paused, defaults to true, iOS only\n   */\n  reportSessionsOnPause?: boolean;\n}\n\nexport interface FlurryAnalyticsLocation {\n  latitude: number;\n  longitude: number;\n  /**\n   * Set altitude\n   * It is optional and use only for iOS\n   */\n  verticalAccuracy?: number;\n  /**\n   * Set radius about 2d point\n   * It is optional and use only for iOS\n   */\n  horizontalAccuracy?: number;\n}\n\n/**\n* @hidden\n*/\nexport class FlurryAnalyticsObject {\n\n  constructor(private _objectInstance: any) { }\n\n  /**\n   * This function set the Event\n   * @param eventName {string} Name of the event\n   * @param [params] {Object} Optional params\n   * @return {Promise<any>} Returns a promise that resolves when event is sent\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  logEvent(eventName: string, params?: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Start a timed event\n   * @param eventName {string} Name of the event\n   * @param [params] {Object} Optional params\n   * @return {Promise<any>} Returns a promise that resolves when timed event is started tracking\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  startTimedEvent(eventName: string, params?: Object): Promise<any> {\n    return;\n  }\n\n  /**\n   * Complete a timed event\n   * @param eventName {string} Name of the event\n   * @param [params] {Object} Optional params\n   * @return {Promise<any>} Returns a promise that resolves when timed event is ended tracking\n   */\n  @CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  endTimedEvent(eventName: string, params?: Object): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function log an error\n   * @param code\n   * @param message\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  logError(code: any, message: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function log a page view\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  logPageView(): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function set the location for the event\n   * (this is will only be used for very course grained statistics like city)\n   * @param location {FlurryAnalyticsLocation}\n   * @param message {string}\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  setLocation(location: FlurryAnalyticsLocation, message: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function start the session\n   * Only needed for older versions of Android\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  startSession(): Promise<any> {\n    return;\n  }\n\n  /**\n   * This function end the session\n   * Only needed for older versions of Android\n   * @return {Promise<any>}\n   */\n  @CordovaInstance()\n  endSession(): Promise<any> {\n    return;\n  }\n\n}\n\n/**\n * @name Flurry Analytics\n * @description\n * This plugin connects to Flurry Analytics SDK\n *\n * @usage\n * ```typescript\n * import { FlurryAnalytics, FlurryAnalyticsObject, FlurryAnalyticsOptions } from '@ionic-native/flurry-analytics';\n *\n * constructor(private flurryAnalytics: FlurryAnalytics) { }\n *\n * ...\n *\n * const options: FlurryAnalyticsOptions = {\n *  appKey: '<your app key>', // REQUIRED\n *  reportSessionsOnClose: true,\n *  enableLogging: true\n * };\n *\n * let fa: FlurryAnalyticsObject = this.flurryAnalytics.create(options);\n *\n * fa.logEvent('event name')\n *   .then(() => console.log('Logged an event!'))\n *   .catch(e => console.log('Error logging the event', e));\n *\n * ```\n * @interfaces\n * FlurryAnalyticsOptions\n * FlurryAnalyticsLocation\n * @classes\n * FlurryAnalyticsObject\n */\n@Plugin({\n  pluginName: 'FlurryAnalytics',\n  plugin: 'cordova-plugin-flurryanalytics',\n  pluginRef: 'FlurryAnalytics',\n  repo: 'https://github.com/blakgeek/cordova-plugin-flurryanalytics',\n  platforms: ['Android', 'iOS']\n})\n\nexport class FlurryAnalytics extends IonicNativePlugin {\n\n  /**\n   * Creates a new instance of FlurryAnalyticsObject\n   * @param options {FlurryAnalyticsOptions} options\n   * @return {FlurryAnalyticsObject}\n   */\n  create(options: FlurryAnalyticsOptions): FlurryAnalyticsObject {\n\n    let instance: any;\n\n    if (checkAvailability(FlurryAnalytics.pluginRef, null, FlurryAnalytics.pluginName) === true) {\n      instance = new (window as any).FlurryAnalytics(options);\n    }\n\n    return new FlurryAnalyticsObject(instance);\n\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
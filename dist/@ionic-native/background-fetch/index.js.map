{"version":3,"sources":["../../../src/@ionic-native/plugins/background-fetch/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AACxE,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAW3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAyCG;AASH;IAAqC,mCAAiB;IAAtD;;IAkDA,CAAC;IA/CC;;;;;OAKG;IAIH,mCAAS,GAAT,UAAU,MAA6B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAElE;;;;OAIG;IAEH,+BAAK,GAAL,cAAwB,MAAM,CAAC,CAAC,CAAC;IAEjC;;;OAGG;IAEH,8BAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;OAEG;IAIH,gCAAM,GAAN,cAAiB,CAAC;IAElB;;;OAGG;IAEH,gCAAM,GAAN,cAAyB,MAAM,CAAC,CAAC,CAAC;IAE7B,0BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IArCA;QAHC,OAAO,CAAC;YACP,aAAa,EAAE,SAAS;SACzB,CAAC;;;;oDACgE;IAQlE;QADC,OAAO,EAAE;;;;gDACuB;IAOjC;QADC,OAAO,EAAE;;;;+CACsB;IAQhC;QAHC,OAAO,CAAC;YACP,IAAI,EAAE,IAAI;SACX,CAAC;;;;iDACgB;IAOlB;QADC,OAAO,EAAE;;;;iDACwB;IA1CvB,eAAe;QAR3B,MAAM,CAAC;YACN,UAAU,EAAE,iBAAiB;YAC7B,MAAM,EAAE,iCAAiC;YACzC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,mEAAmE;YACzE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,eAAe,CAkD3B;IAAD,sBAAC;CAlDD,AAkDC,CAlDoC,iBAAiB,GAkDrD;SAlDY,eAAe","file":"index.js","sourceRoot":"","sourcesContent":["import { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\nimport { Injectable } from '@angular/core';\n\nexport interface BackgroundFetchConfig {\n\n  /**\n   * Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n   */\n  stopOnTerminate?: boolean;\n}\n\n\n/**\n * @name Background Fetch\n * @description\n * iOS Background Fetch Implementation. See: https://developer.apple.com/reference/uikit/uiapplication#1657399\n * iOS Background Fetch is basically an API which wakes up your app about every 15 minutes (during the user's prime-time hours) and provides your app exactly 30s of background running-time. This plugin will execute your provided callbackFn whenever a background-fetch event occurs. There is no way to increase the rate which a fetch-event occurs and this plugin sets the rate to the most frequent possible value of UIApplicationBackgroundFetchIntervalMinimum -- iOS determines the rate automatically based upon device usage and time-of-day (ie: fetch-rate is about ~15min during prime-time hours; less frequently when the user is presumed to be sleeping, at 3am for example).\n * For more detail, please see https://github.com/transistorsoft/cordova-plugin-background-fetch\n *\n * @usage\n *\n * ```typescript\n * import { BackgroundFetch, BackgroundFetchConfig } from '@ionic-native/background-fetch';\n *\n *\n * constructor(private backgroundFetch: BackgroundFetch) {\n *\n *   const config: BackgroundFetchConfig = {\n *     stopOnTerminate: false, // Set true to cease background-fetch from operating after user \"closes\" the app. Defaults to true.\n *   };\n *\n *   backgroundFetch.configure(config)\n *      .then(() => {\n *          console.log('Background Fetch initialized');\n *\n *          this.backgroundFetch.finish();\n *\n *      })\n *      .catch(e => console.log('Error initializing background fetch', e));\n *\n *   // Start the background-fetch API. Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n *   backgroundFetch.start();\n *\n *   // Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n *   backgroundFetch.stop();\n *\n *\n * }\n *\n * ```\n * @interfaces\n * BackgroundFetchConfig\n *\n */\n@Plugin({\n  pluginName: 'BackgroundFetch',\n  plugin: 'cordova-plugin-background-fetch',\n  pluginRef: 'BackgroundFetch',\n  repo: 'https://github.com/transistorsoft/cordova-plugin-background-fetch',\n  platforms: ['iOS']\n})\n\nexport class BackgroundFetch extends IonicNativePlugin {\n\n\n  /**\n   * Configures the plugin's fetch callbackFn\n   *\n   * @param {BackgroundFetchConfig} config Configuration for plugin\n   * @return {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  configure(config: BackgroundFetchConfig): Promise<any> { return; }\n\n  /**\n   * Start the background-fetch API.\n   * Your callbackFn provided to #configure will be executed each time a background-fetch event occurs. NOTE the #configure method automatically calls #start. You do not have to call this method after you #configure the plugin\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  start(): Promise<any> { return; }\n\n  /**\n   * Stop the background-fetch API from firing fetch events. Your callbackFn provided to #configure will no longer be executed.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stop(): Promise<any> { return; }\n\n  /**\n   * You MUST call this method in your fetch callbackFn provided to #configure in order to signal to iOS that your fetch action is complete. iOS provides only 30s of background-time for a fetch-event -- if you exceed this 30s, iOS will kill your app.\n   */\n  @Cordova({\n    sync: true\n  })\n  finish(): void { }\n\n  /**\n   * Return the status of the background-fetch\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  status(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../src/@ionic-native/plugins/pinterest/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, CordovaProperty, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface PinterestUser {\n  /**\n   * The unique string of numbers and letters that identifies the user on Pinterest.\n   */\n  id?: string;\n  /**\n   * The user’s Pinterest username.\n   */\n  username?: string;\n  /**\n   * The user’s first name.\n   */\n  first_name?: string;\n  /**\n   * The user’s last name.\n   */\n  last_name?: string;\n  /**\n   * The text in the user’s “About you” section in their profile.\n   */\n  bio?: string;\n  /**\n   * The date the user created their account in ISO 8601 format\n   */\n  created_at?: string;\n  /**\n   * The user’s stats, including how many Pins, follows, boards and likes they have.\n   */\n  counts?: any;\n  /**\n   * The user’s profile image. The response returns the image’s URL, width and height.\n   */\n  image?: any;\n}\n\nexport interface PinterestBoard {\n  /**\n   * The unique string of numbers and letters that identifies the board on Pinterest.\n   */\n  id?: string;\n  /**\n   * The name of the board.\n   */\n  name?: string;\n  /**\n   * The link to the board.\n   */\n  url?: string;\n  /**\n   * The user-entered description of the board.\n   */\n  description?: string;\n  /**\n   * The first and last name, ID and profile URL of the user who created the board.\n   */\n  creator?: PinterestUser;\n  /**\n   * The date the user created the board.\n   */\n  created_at?: string;\n  /**\n   * The board’s stats, including how many Pins, followers, user's following and collaborators it has.\n   */\n  counts?: any;\n  /**\n   * The user’s profile image. The response returns the image’s URL, width and height.\n   */\n  image?: any;\n}\n\nexport interface PinterestPin {\n  /**\n   * The unique string of numbers and letters that identifies the Pin on Pinterest.\n   */\n  id?: string;\n  /**\n   * The URL of the webpage where the Pin was created.\n   */\n  link?: string;\n  /**\n   * The URL of the Pin on Pinterest.\n   */\n  url?: string;\n  /**\n   * The first and last name, ID and profile URL of the user who created the board.\n   */\n  creator?: PinterestUser;\n  /**\n   * The board that the Pin is on.\n   */\n  board?: PinterestBoard;\n  /**\n   * The date the Pin was created.\n   */\n  created_at?: string;\n  /**\n   * The user-entered description of the Pin.\n   */\n  note?: string;\n  /**\n   * The dominant color of the Pin’s image in hex code format.\n   */\n  color?: string;\n  /**\n   * The Pin’s stats, including the number of repins, comments and likes.\n   */\n  counts?: any;\n  /**\n   * The media type of the Pin (image or video).\n   */\n  media?: any;\n  /**\n   * The source data for videos, including the title, URL, provider, author name, author URL and provider name.\n   */\n  attribution?: any;\n  /**\n   * The Pin’s image. The default response returns the image’s URL, width and height.\n   */\n  image?: any;\n  /**\n   * Extra information about the Pin for Rich Pins. Includes the Pin type (e.g., article, recipe) and related information (e.g., ingredients, author).\n   */\n  metadata?: any;\n}\n\n/**\n * @beta\n * @name Pinterest\n * @description\n * Cordova plugin for Pinterest\n *\n * @usage\n * ```typescript\n * import { Pinterest, PinterestUser, PinterestPin, PinterestBoard } from '@ionic-native/pinterest';\n *\n * constructor(private pinterest: Pinterest) { }\n *\n * ...\n *\n * const scopes = [\n *   this.pinterest.SCOPES.READ_PUBLIC,\n *   this.pinterest.SCOPES.WRITE_PUBLIC,\n *   this.pinterest.SCOPES.READ_RELATIONSHIPS,\n *   this.pinterest.SCOPES.WRITE_RELATIONSHIPS\n * ];\n *\n * this.pinterest.login(scopes)\n *   .then(res => console.log('Logged in!', res))\n *   .catch(err => console.error('Error loggin in', err));\n *\n * this.pinterest.getMyPins()\n *   .then((pins: Array<PinterestPin>) => console.log(pins))\n *   .catch(err => console.error(err));\n *\n * this.pinterest.getMe()\n *   .then((user: PinterestUser) => console.log(user));\n *\n * this.pinterest.getMyBoards()\n *   .then((boards: Array<PinterestBoard>) => console.log(boards));\n *\n * ```\n * @interfaces\n * PinterestUser\n * PinterestBoard\n * PinterestPin\n */\n@Plugin({\n  pluginName: 'Pinterest',\n  plugin: 'cordova-plugin-pinterest',\n  pluginRef: 'cordova.plugins.Pinterest',\n  repo: 'https://github.com/zyramedia/cordova-plugin-pinterest',\n  install: 'ionic cordova plugin add cordova-plugin-pinterest --variable APP_ID=YOUR_APP_ID',\n  installVariables: ['APP_ID'],\n  platforms: ['Android', 'iOS']\n})\n\nexport class Pinterest extends IonicNativePlugin {\n\n  /**\n   * Convenience constant for authentication scopes\n   */\n  @CordovaProperty\n  SCOPES: {\n    READ_PUBLIC: string;\n    WRITE_PUBLIC: string;\n    READ_RELATIONSHIPS: string;\n    WRITE_RELATIONSHIPS: string;\n  };\n\n  /**\n   * Logs the user in using their Pinterest account.\n   * @param scopes {Array<string>} Array of scopes that you need access to. You can use Pinterest.SCOPES constant for convenience.\n   * @returns {Promise<any>} The response object will contain the user's profile data, as well as the access token (if you need to use it elsewhere, example: send it to your server and perform actions on behalf of the user).\n   */\n  @Cordova()\n  login(scopes: string[]): Promise<any> { return; }\n\n  /**\n   * Gets the authenticated user's profile\n   * @param fields {string} Fields to retrieve, separated by commas. Defaults to all available fields.\n   * @returns {Promise<PinterestUser>} Returns a promise that resolves with the user's object\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMe(fields?: string): Promise<PinterestUser> { return; }\n\n  /**\n   *\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestPin>>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyPins(fields?: string, limit?: number): Promise<Array<PinterestPin>> { return; }\n\n  /**\n   *\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestBoard>>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyBoards(fields?: string, limit?: number): Promise<Array<PinterestBoard>> { return; }\n\n  /**\n   * Get the authenticated user's likes.\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestPin>>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyLikes(fields?: string, limit?: number): Promise<Array<PinterestPin>> { return; }\n\n  /**\n   * Get the authenticated user's followers.\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestUser>>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyFollowers(fields?: string, limit?: number): Promise<Array<PinterestUser>> { return; }\n\n  /**\n   * Get the authenticated user's followed boards.\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestBoard>>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyFollowedBoards(fields?: string, limit?: number): Promise<Array<PinterestBoard>> { return; }\n\n  /**\n   * Get the authenticated user's followed interests.\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getMyFollowedInterests(fields?: string, limit?: number): Promise<any> { return; }\n\n  /**\n   * Get a user's profile.\n   * @param username\n   * @param fields\n   * @returns {Promise<PinterestUser>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  getUser(username: string, fields?: string): Promise<PinterestUser> { return; }\n\n  /**\n   * Get a board's data.\n   * @param boardId\n   * @param fields\n   * @returns {Promise<PinterestBoard>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  getBoard(boardId: string, fields?: string): Promise<PinterestBoard> { return; }\n\n  /**\n   * Get Pins of a specific board.\n   * @param boardId {string} The ID of the board\n   * @param fields {string} Optional fields separated by comma\n   * @param limit {number} Optional limit, defaults to 100, maximum is 100.\n   * @returns {Promise<Array<PinterestPin>>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  getBoardPins(boardId: string, fields?: string, limit?: number): Promise<Array<PinterestPin>> { return; }\n\n  /**\n   * Delete a board.\n   * @param boardId {string} The ID of the board\n   * @returns {Promise<PinterestUser>}\n   */\n  @Cordova()\n  deleteBoard(boardId: string): Promise<any> { return; }\n\n  /**\n   * Create a new board for the authenticated user.\n   * @param name {string} Name of the board\n   * @param desc {string} Optional description of the board\n   * @returns {Promise<PinterestBoard>}\n   */\n  @Cordova({\n    successIndex: 2,\n    errorIndex: 3\n  })\n  createBoard(name: string, desc?: string): Promise<PinterestBoard> { return; }\n\n  /**\n   * Get a Pin by ID.\n   * @param pinId {string} The ID of the Pin\n   * @param fields {string} Optional fields separated by comma\n   * @returns {Promise<PinterestPin>}\n   */\n  @Cordova({\n    successIndex: 1,\n    errorIndex: 2\n  })\n  getPin(pinId: string, fields?: string): Promise<PinterestPin> { return; }\n\n  /**\n   * Deletes a pin\n   * @param pinId {string} The ID of the pin\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  deletePin(pinId: string): Promise<any> { return; }\n\n  /**\n   * Creates a Pin\n   * @param note {string} Note/Description of the pin\n   * @param boardId {string} Board ID to put the Pin under\n   * @param imageUrl {string} URL of the image to share\n   * @param link {string} Optional link to share\n   * @returns {Promise<PinterestPin>}\n   */\n  @Cordova({\n    successIndex: 4,\n    errorIndex: 5\n  })\n  createPin(note: string, boardId: string, imageUrl: string, link?: string): Promise<PinterestPin> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
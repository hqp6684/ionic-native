{"version":3,"sources":["../../../src/@ionic-native/plugins/google-play-games-services/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,MAAA,EAAQ,OAAA,EAAS,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAoFxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAoEG;AAUH;IAA6C,2CAAiB;IAA9D;;IA0GA,CAAC;IAxGC;;;;;OAKG;IAEH,sCAAI,GAAJ,cAAuB,MAAM,CAAC,CAAC,CAAC;IAEhC;;;;;OAKG;IAEH,yCAAO,GAAP,cAA0B,MAAM,CAAC,CAAC,CAAC;IAEnC;;;;;OAKG;IAEH,4CAAU,GAAV,cAA0C,MAAM,CAAC,CAAC,CAAC;IAEnD;;;;;OAKG;IAEH,4CAAU,GAAV,cAAgC,MAAM,CAAC,CAAC,CAAC;IAEzC;;;;;;;OAOG;IAEH,6CAAW,GAAX,UAAY,IAAe,IAAqB,MAAM,CAAC,CAAC,CAAC;IAEzD;;;;;;OAMG;IAEH,qDAAmB,GAAnB,cAAsC,MAAM,CAAC,CAAC,CAAC;IAE/C;;;;;;;OAOG;IAEH,iDAAe,GAAf,UAAgB,IAAqB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEhE;;;;;;OAMG;IAEH,mDAAiB,GAAjB,UAAkB,IAAqB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAErE;;;;;;OAMG;IAEH,sDAAoB,GAApB,UAAqB,IAAkC,IAAqB,MAAM,CAAC,CAAC,CAAC;IAErF;;;;;;OAMG;IAEH,kDAAgB,GAAhB,cAAmC,MAAM,CAAC,CAAC,CAAC;IAEvC,kCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IAhGA;QADC,OAAO,EAAE;;;;uDACsB;IAShC;QADC,OAAO,EAAE;;;;0DACyB;IASnC;QADC,OAAO,EAAE;;;;6DACyC;IASnD;QADC,OAAO,EAAE;;;;6DAC+B;IAWzC;QADC,OAAO,EAAE;;;;8DAC+C;IAUzD;QADC,OAAO,EAAE;;;;sEACqC;IAW/C;QADC,OAAO,EAAE;;;;kEACsD;IAUhE;QADC,OAAO,EAAE;;;;oEAC2D;IAUrE;QADC,OAAO,EAAE;;;;uEAC2E;IAUrF;QADC,OAAO,EAAE;;;;mEACkC;IAlGjC,uBAAuB;QATnC,MAAM,CAAC;YACN,UAAU,EAAE,yBAAyB;YACrC,MAAM,EAAE,mCAAmC;YAC3C,SAAS,EAAE,2BAA2B;YACtC,IAAI,EAAE,gEAAgE;YACtE,SAAS,EAAE,CAAC,SAAS,CAAC;YACtB,OAAO,EAAE,2FAA2F;SACrG,CAAC;OAEW,uBAAuB,CA0GnC;IAAD,8BAAC;CA1GD,AA0GC,CA1G4C,iBAAiB,GA0G7D;SA1GY,uBAAuB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Plugin, Cordova, IonicNativePlugin } from '@ionic-native/core';\n\nexport interface ScoreData {\n\n  /**\n   * The score to submit.\n   */\n  score: number;\n\n  /**\n   * The leaderboard ID from Google Play Developer console.\n   */\n  leaderboardId: string;\n\n}\n\nexport interface LeaderboardData {\n\n  /**\n   * The leaderboard ID from Goole Play Developer console.\n   */\n  leaderboardId: string;\n\n}\n\nexport interface AchievementData {\n\n  /**\n   * The achievement ID from Google Play Developer console.\n   */\n  achievementId: string;\n\n}\n\nexport interface IncrementableAchievementData extends AchievementData {\n\n  /**\n   * The amount to increment the achievement by.\n   */\n  numSteps: number;\n\n}\n\nexport interface SignedInResponse {\n\n  /**\n   * True or false is the use is signed in.\n   */\n  isSignedIn: boolean;\n\n}\n\nexport interface Player {\n\n  /**\n   * The players display name.\n   */\n  displayName: string;\n\n  /**\n   * The ID given to the player by Play Games Services.\n   */\n  playerId: string;\n\n  /**\n   * The title of the player based on their gameplay activity. Not\n   * all players have this and it may change over time.\n   */\n  title: string|null;\n\n  /**\n   * Retrieves the URI for loading this player's icon-size profile image. \n   * Returns null if the player has no profile image.\n   */\n  iconImageUrl: string;\n\n  /**\n   * Retrieves the URI for loading this player's hi-res profile image. Returns\n   * null if the player has no profile image.\n   */\n  hiResIconImageUrl: string;\n\n}\n\n/**\n * @name Google Play Games Services\n * @description\n * A Cordova plugin that let's you interact with Google Play Games Services.\n *\n * @usage\n * ```typescript\n * import { GooglePlayGamesServices } from '@ionic-native/google-play-games-services';\n *\n *\n * constructor(private googlePlayGamesServices: GooglePlayGamesServices) { }\n *\n * ...\n *\n * // Authenticate with Play Games Services\n * this.googlePlayGamesServices.auth()\n *     .then(() => console.log('Logged in to Play Games Services'))\n *     .catch(e) => console.log('Error logging in Play Games Services', e);\n * \n * // Sign out of Play Games Services.\n * this.googlePlayGamesServices.signOut()\n *     .then(() => console.log('Logged out of Play Games Services'))\n *     .catch(e => console.log('Error logging out of Play Games Services', e);\n * \n * // Check auth status.\n * this.googlePlayGamesServices.isSignedIn()\n *     .then((signedIn: SignedInResponse) => {\n *         if (signedIn.isSignedIn) {\n *             hideLoginButton();\n *         }\n *     });\n * \n * // Fetch currently authenticated user's data.\n * this.googlePlayGamesServices.showPlayer().then((data: Player) => {\n *    console.log('Player data', data);\n * });\n * \n * // Submit a score.\n * this.googlePlayGamesServices.submitScore({\n *     score: 100,\n *     leaderboardId: 'SomeLeaderboardId'\n * });\n * \n * // Show the native leaderboards window.\n * this.googlePlayGamesServices.showAllLeaderboards()\n *     .then(() => console.log('The leaderboard window is visible.'));\n * \n * // Show a signle native leaderboard window.\n * this.googlePlayGamesServices.showLeaderboard({\n *     leaderboardId: 'SomeLeaderBoardId'\n * }).then(() => console.log('The leaderboard window is visible.'));\n * \n * // Unlock an achievement.\n * this.googlePlayGamesServices.unlockAchievement({\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement unlocked'));\n * \n * // Incremement an achievement.\n * this.googlePlayGamesServices.incrementAchievement({\n *     step: 1,\n *     achievementId: 'SomeAchievementId'\n * }).then(() => console.log('Achievement incremented'));\n * \n * // Show the native achievements window.\n * this.googlePlayGamesServices.showAchivements()\n *    .then(() => console.log('The achievements window is visible.'));\n *\n * ```\n */\n@Plugin({\n  pluginName: 'GooglePlayGamesServices',\n  plugin: 'cordova-plugin-play-games-service',\n  pluginRef: 'plugins.playGamesServices',\n  repo: 'https://github.com/artberri/cordova-plugin-play-games-services',\n  platforms: ['Android'],\n  install: 'ionic cordova plugin add cordova-plugin-play-games-service --variable APP_ID=\"YOUR_APP_ID',\n})\n\nexport class GooglePlayGamesServices extends IonicNativePlugin {\n\n  /**\n   * Initialise native Play Games Service login procedure.\n   * \n   * @return {Promise<any>} Returns a promise that resolves when the player\n   * is authenticated with Play Games Services.\n   */\n  @Cordova()\n  auth(): Promise<any> { return; }\n\n  /**\n   * Sign out of Google Play Games Services.\n   * \n   * @return {Promise<any>} Returns a promise that resolve when the player\n   * successfully signs out.\n   */\n  @Cordova()\n  signOut(): Promise<any> { return; }\n\n  /**\n   * Check if the user is signed in.\n   * \n   * @return {Promise<SignedInResponse>} Returns a promise that resolves with\n   * the signed in response.\n   */\n  @Cordova()\n  isSignedIn(): Promise<SignedInResponse> { return; }\n\n  /**\n   * Show the currently authenticated player.\n   * \n   * @return {Promise<Player>} Returns a promise that resolves when Play \n   * Games Services returns the authenticated player.\n   */\n  @Cordova()\n  showPlayer(): Promise<Player> { return; }\n\n  /**\n   * Submit a score to a leaderboard. You should ensure that you have a\n   * successful return from auth() before submitting a score.\n   * \n   * @param data {ScoreData} The score data you want to submit.\n   * @return {Promise<any>} Returns a promise that resolves when the\n   * score is submitted.\n   */\n  @Cordova()\n  submitScore(data: ScoreData): Promise<string> { return; }\n\n  /**\n   * Launches the native Play Games leaderboard view controller to show all the\n   * leaderboards.\n   * \n   * @return {Promise<any>} Returns a promise that resolves when the native\n   * leaderboards window opens.\n   */\n  @Cordova()\n  showAllLeaderboards(): Promise<any> { return; }\n\n  /**\n   * Launches the native Play Games leaderboard view controll to show the\n   * specified leaderboard.\n   * \n   * @param data {LeaderboardData} The leaderboard you want to show.\n   * @return {Promise<any>} Returns a promise that resolves when the native\n   * leaderboard window opens.\n   */\n  @Cordova()\n  showLeaderboard(data: LeaderboardData): Promise<any> { return; }\n\n  /**\n   * Unlock an achievement.\n   * \n   * @param data {AchievementData}\n   * @return {Promise<any>} Returns a promise that resolves when the\n   * achievement is unlocked.\n   */\n  @Cordova()\n  unlockAchievement(data: AchievementData): Promise<string> { return; }\n\n  /**\n   * Increment an achievement.\n   * \n   * @param data {IncrementableAchievementData}\n   * @return {Promise<any>} Returns a promise that resolves when the\n   * achievement is incremented.\n   */\n  @Cordova()\n  incrementAchievement(data: IncrementableAchievementData): Promise<string> { return; }\n\n  /**\n   * Lauches the native Play Games achievements view controller to show\n   * achievements.\n   * \n   * @return {Promise<any>} Returns a promise that resolves when the\n   * achievement window opens.\n   */\n  @Cordova()\n  showAchievements(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}